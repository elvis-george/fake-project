{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Project 3 Backend",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3001",
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints"
    },
    {
      "name": "Inventory",
      "description": "Endpoints"
    },
    {
      "name": "Menu",
      "description": "Endpoints"
    },
    {
      "name": "Orders",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Auth/": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to do a health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Auth/new": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to create a new authorized user.",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "First name of new user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of new user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email address name of new user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type (server,manager) name of new user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "security_token",
            "in": "query",
            "description": "Google security token of new user account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Auth/all": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to get all employee data.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Auth/type": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to get the type of user (server,manager,none).",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email address of questioned user.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Auth/edit": {
      "put": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to create a edit a current authorized user.",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "First name of the user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name of the user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email address name of the user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type (server,manager) name of the user.",
            "required": true,
            "type": "string"
          },
          {
            "name": "security_token",
            "in": "query",
            "description": "Google security token of the user account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/inventory/": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "description": "Endpoint to get all items in the inventory",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "description": "Endpoint to create new inventory item.",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "description": "New ingredient information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/inventory/restock": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "description": "Endpoint to get the Restock report.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "description": "Endpoint to get inventory item based on the inventory id number.",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Id of inventory item"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "description": "Endpoint to edit inventory item.",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Id of inventory item"
          },
          {
            "name": "updatedItem",
            "in": "body",
            "description": "Updated Ingredient Information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory"
        ],
        "description": "Endpoint to delete an inventory item.",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Id of inventory item"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/menu/": {
      "get": {
        "tags": [
          "Menu"
        ],
        "description": "Endpoint to get all items in the menu",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/menu/prices": {
      "get": {
        "tags": [
          "Menu"
        ],
        "description": "Endpoint to get the prices for the different menu items",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/menu/{itemTypeId}": {
      "get": {
        "tags": [
          "Menu"
        ],
        "description": "Endpoint to get menu item based on classification (starter,base,protein), id and name. 3 options: get all items of the type (typeOnly), get item with that id (typeId), get item with that name (typeName)",
        "parameters": [
          {
            "name": "itemTypeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Classification of menu item type, menu item id and menu item name.   Options:   typeOnly: starter,   typeId: starter-1,   typeName: starter-Falafel"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Menu"
        ],
        "description": "Endpoint to delete menu item based on id",
        "parameters": [
          {
            "name": "itemTypeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Classification of menu item type and menu item id. Structure: type-id.",
            "schema": {
              "type": "object",
              "properties": {
                "itemTypeId": {
                  "type": "string",
                  "example": "starter-2"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/menu/{newItemType}": {
      "post": {
        "tags": [
          "Menu"
        ],
        "description": "Endpoint to create a new menu item.",
        "parameters": [
          {
            "name": "newItemType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Classification of menu item type (starter, protein, or base)."
          },
          {
            "name": "item",
            "in": "body",
            "description": "New menu item information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MenuItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/menu/{itemType}": {
      "put": {
        "tags": [
          "Menu"
        ],
        "description": "Endpoint to edit a menu item.",
        "parameters": [
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Classification of menu item type (starter, protein, or base)."
          },
          {
            "name": "item",
            "in": "body",
            "description": "Updated menu item information. Note: Price is ignored for proteins",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MenuItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Health check for orders route",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint add a order (and add all subsequent items) to database.",
        "parameters": [
          {
            "name": "employeeId",
            "in": "body",
            "description": "Id of employee taking the order",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "employeeId": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          },
          {
            "name": "items",
            "in": "body",
            "description": "Array of item objects. Each item contains information about the item.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItems"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/sales": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint for sales report. Given a time window, display the sales by item from the order history.",
        "parameters": [
          {
            "name": "fromDate",
            "description": "Beginning of time window. YYYY-MM-DD",
            "required": true,
            "in": "query",
            "type": "string"
          },
          {
            "name": "toDate",
            "description": "End of time window. YYYY-MM-DD",
            "required": true,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/pairs": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint returns most popular pairs of sales (most popular pairs of menu items that were ordered within time frame).",
        "parameters": [
          {
            "name": "fromDate",
            "description": "Beginning of time window. YYYY-MM-DD",
            "required": true,
            "in": "query",
            "type": "string"
          },
          {
            "name": "toDate",
            "description": "End of time window. YYYY-MM-DD",
            "required": true,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/excess": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Endpoint returns excess report. Given a timestamp, display the list of items that only sold less than 10% of their inventory between the timestamp and the current time, assuming no restocks have happened during the window.",
        "parameters": [
          {
            "name": "fromDate",
            "description": "Beginning of time window. YYYY-MM-DD",
            "required": true,
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "InventoryItem": {
      "type": "object",
      "properties": {
        "ingredient_name": {
          "type": "string",
          "example": "Falafel"
        },
        "quantity": {
          "type": "number",
          "example": 100
        }
      }
    },
    "MenuItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 2
        },
        "name": {
          "type": "string",
          "example": "Gyro"
        },
        "quantity": {
          "type": "number",
          "example": 100
        },
        "price": {
          "type": "number",
          "example": 2.85
        }
      }
    },
    "OrderItems": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "isCombo": {
                "type": "string",
                "example": ""
              },
              "starterId": {
                "type": "string",
                "example": "1"
              },
              "baseId": {
                "type": "string",
                "example": ""
              },
              "proteinId": {
                "type": "string",
                "example": ""
              }
            }
          }
        }
      }
    }
  }
}